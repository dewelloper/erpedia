<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.Integration.AspNetCore</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.Integration.AspNetCore.AspNetRequestLifestyle">
            <summary>
            Defines a lifestyle that caches instances during the execution of a single ASP.NET Request.
            Unless explicitly stated otherwise, instances created by this lifestyle will be disposed at the end
            of the request. Do note that this lifestyle requires the 
            <see cref="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.UseSimpleInjectorAspNetRequestScoping(Microsoft.Extensions.DependencyInjection.IServiceCollection,SimpleInjector.Container)">UseSimpleInjectorAspNetRequestScoping.</see>
            to be registered in the Web API configuration.
            </summary>
            <example>
            The following example shows the usage of the <b>AspNetRequestLifestyle</b> class:
            <code lang="cs"><![CDATA[
            var container = new Container();
            container.Options.DefaultScopedLifestyle = new AspNetRequestLifestyle();
            
            container.Register<IUnitOfWork, EntityFrameworkUnitOfWork>(Lifestyle.Scoped);
            ]]></code>
            </example>
        </member>
        <member name="M:SimpleInjector.Integration.AspNetCore.AspNetRequestLifestyle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Integration.AspNetCore.AspNetRequestLifestyle"/> class.
            The created and cached instance will be disposed when the Web API request ends, and when the 
            created object implements <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.AspNetCore.AspNetRequestLifestyle.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Integration.AspNetCore.AspNetRequestLifestyle"/> class.</summary>
            <param name="disposeInstanceWhenScopeEnds">
            Specifies whether the created and cached instance will be disposed when the Web API request ends,
            and when the created object implements <see cref="T:System.IDisposable"/>. 
            </param>
        </member>
        <member name="T:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions">
            <summary>
            Extension methods for integrating Simple Injector with ASP.NET applications.
            </summary>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.UseSimpleInjectorAspNetRequestScoping(Microsoft.AspNetCore.Builder.IApplicationBuilder,SimpleInjector.Container)">
            <summary>Wraps ASP.NET requests in an <see cref="T:SimpleInjector.Lifestyles.AsyncScopedLifestyle"/>.</summary>
            <param name="applicationBuilder">The ASP.NET application builder instance that references all
            framework components.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.UseSimpleInjectorAspNetRequestScoping(Microsoft.Extensions.DependencyInjection.IServiceCollection,SimpleInjector.Container)">
            <summary>Wraps ASP.NET requests in an <see cref="T:SimpleInjector.Lifestyles.AsyncScopedLifestyle"/>.</summary>
            <param name="services">The ASP.NET application builder instance that references all
            framework components.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.GetRequestService``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Get service of type <typeparamref name="T"/> from the list of request-specific services of the
            application builder. This preserves the lifestyle of the registered component.
            </summary>
            <typeparam name="T">The type of service object to get.</typeparam>
            <param name="builder">The IApplicationBuilder to retrieve the service object from.</param>
            <returns>A service object of type T or null if there is no such service.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the method is called outside the 
            context of a web request.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.GetRequiredRequestService``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Get service of type <typeparamref name="T"/> from the list of request-specific services of the
            application builder. This preserves the lifestyle of the registered component.
            </summary>
            <typeparam name="T"> The type of service object to get.</typeparam>
            <param name="builder">The IApplicationBuilder to retrieve the service object from.</param>
            <returns>A service object of type T.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the method is called outside the 
            context of a web request, or when there is no service of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.EnableSimpleInjectorCrossWiring(Microsoft.Extensions.DependencyInjection.IServiceCollection,SimpleInjector.Container)">
            <summary>
            Enables ASP.NET Core services to be cross-wired in the Container. This method should be called 
            in the <b>ConfigureServices</b> method of the application's <b>Startup</b> class. When cross-wiring
            is enabled, individual cross-wire registrations can be made by calling 
            <see cref="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.CrossWire``1(SimpleInjector.Container,Microsoft.AspNetCore.Builder.IApplicationBuilder)"/>.
            </summary>
            <param name="services">The ASP.NET application builder instance that references all
            framework components.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.CrossWire``1(SimpleInjector.Container,Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Cross-wires an ASP.NET Core or third party service to the container, to allow the service to be
            injected into components that are built by the container.
            </summary>
            <typeparam name="TService">The type of service object to cross-wire.</typeparam>
            <param name="container">The container.</param>
            <param name="builder">The IApplicationBuilder to retrieve the service object from.</param>
        </member>
        <member name="M:SimpleInjector.SimpleInjectorAspNetCoreIntegrationExtensions.CrossWire(SimpleInjector.Container,System.Type,Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Cross-wires an ASP.NET Core or third party service to the container, to allow the service to be
            injected into components that are built by the container.
            </summary>
            <param name="container">The container.</param>
            <param name="serviceType">The type of service object to ross-wire.</param>
            <param name="builder">The IApplicationBuilder to retrieve the service object from.</param>
        </member>
    </members>
</doc>
